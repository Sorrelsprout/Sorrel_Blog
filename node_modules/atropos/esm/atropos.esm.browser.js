/**
 * Atropos 0.11.2
 * Touch-friendly 3D parallax hover effects
 * https://atroposjs.com
 *
 * Copyright 2021-2021 
 *
 * Released under the MIT License
 *
 * Released on: October 15, 2021
 */

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/* eslint-disable no-restricted-globals */
var $ = function $(el, sel) {
  return el.querySelector(sel);
};

var $$ = function $$(el, sel) {
  return el.querySelectorAll(sel);
};

var $setDuration = function $setDuration(el, duration) {
  el.style.transitionDuration = duration;
};

var $setTransform = function $setTransform(el, transform) {
  el.style.transform = transform;
};

var $setOpacity = function $setOpacity(el, opacity) {
  el.style.opacity = opacity;
};

var $on = function $on(el, event, handler, props) {
  return el.addEventListener(event, handler, props);
};

var $off = function $off(el, event, handler, props) {
  return el.removeEventListener(event, handler, props);
};

var removeUndefinedProps = function removeUndefinedProps(obj) {
  if (obj === void 0) {
    obj = {};
  }

  var result = {};
  Object.keys(obj).forEach(function (key) {
    if (typeof obj[key] !== 'undefined') result[key] = obj[key];
  });
  return result;
};

function Atropos(originalParams) {
  if (originalParams === void 0) {
    originalParams = {};
  }

  var _originalParams = originalParams,
      el = _originalParams.el,
      eventsEl = _originalParams.eventsEl;
  var self = {
    __atropos__: true,
    params: _extends({
      activeOffset: 50,
      shadowOffset: 50,
      shadowScale: 1,
      durationEnter: 300,
      durationLeave: 600,
      rotateLock: true,
      rotate: true,
      rotateTouch: true,
      rotateXMax: 15,
      rotateYMax: 15,
      rotateXInvert: false,
      rotateYInvert: false,
      stretchX: 0,
      stretchY: 0,
      shadow: true,
      highlight: true,
      onEnter: null,
      onLeave: null,
      onRotate: null
    }, removeUndefinedProps(originalParams || {})),
    destroyed: false,
    isActive: false
  };
  var params = self.params;
  var rotateEl;
  var rotated;
  var scaleEl;
  var innerEl;
  var enterRotateX;
  var enterRotateY;
  var elBoundingClientRect;
  var eventsElBoundingClientRect;
  var rotateXLock = true;
  var rotateYLock = true;
  var shadowEl;
  var highlightEl;

  var createShadow = function createShadow() {
    var created;
    shadowEl = $(el, '.atropos-shadow');

    if (!shadowEl) {
      shadowEl = document.createElement('span');
      shadowEl.classList.add('atropos-shadow');
      created = true;
    }

    $setTransform(shadowEl, "translate3d(0,0,-" + params.shadowOffset + "px) scale(" + params.shadowScale + ")");

    if (created) {
      rotateEl.appendChild(shadowEl);
    }
  };

  var createHighlight = function createHighlight() {
    var created;
    highlightEl = $(el, '.atropos-highlight');

    if (!highlightEl) {
      highlightEl = document.createElement('span');
      highlightEl.classList.add('atropos-highlight');
      created = true;
    }

    $setTransform(highlightEl, "translate3d(0,0,0)");

    if (created) {
      innerEl.appendChild(highlightEl);
    }
  };

  var setChildrenOffset = function setChildrenOffset(_ref) {
    var _ref$rotateXPercentag = _ref.rotateXPercentage,
        rotateXPercentage = _ref$rotateXPercentag === void 0 ? 0 : _ref$rotateXPercentag,
        _ref$rotateYPercentag = _ref.rotateYPercentage,
        rotateYPercentage = _ref$rotateYPercentag === void 0 ? 0 : _ref$rotateYPercentag,
        duration = _ref.duration,
        opacityOnly = _ref.opacityOnly;

    var getOpacity = function getOpacity(element) {
      if (element.dataset.atroposOpacity && typeof element.dataset.atroposOpacity === 'string') {
        return element.dataset.atroposOpacity.split(';').map(function (v) {
          return parseFloat(v);
        });
      }

      return undefined;
    };

    $$(el, '[data-atropos-offset], [data-atropos-opacity]').forEach(function (childEl) {
      $setDuration(childEl, duration);
      var elementOpacity = getOpacity(childEl);

      if (rotateXPercentage === 0 && rotateYPercentage === 0) {
        if (!opacityOnly) $setTransform(childEl, "translate3d(0, 0, 0)");
        if (elementOpacity) $setOpacity(childEl, elementOpacity[0]);
      } else {
        var childElOffset = parseFloat(childEl.dataset.atroposOffset) / 100;

        if (!Number.isNaN(childElOffset) && !opacityOnly) {
          $setTransform(childEl, "translate3d(" + -rotateYPercentage * -childElOffset + "%, " + rotateXPercentage * -childElOffset + "%, 0)");
        }

        if (elementOpacity) {
          var min = elementOpacity[0],
              max = elementOpacity[1];
          var rotatePercentage = Math.max(Math.abs(rotateXPercentage), Math.abs(rotateYPercentage));
          $setOpacity(childEl, min + (max - min) * rotatePercentage / 100);
        }
      }
    });
  };

  var onPointerEnter = function onPointerEnter(e) {
    if (e.type === 'pointerdown' && e.pointerType === 'mouse') return;
    if (e.type === 'pointerenter' && e.pointerType !== 'mouse') return;

    if (e.type === 'pointerdown') {
      e.preventDefault();
    }

    el.classList.add('atropos-active');
    $setDuration(rotateEl, '0ms');
    rotated = false;
    enterRotateX = undefined;
    enterRotateY = undefined;
    rotateXLock = true;
    rotateYLock = true;
    $setTransform(scaleEl, "translate3d(0,0, " + params.activeOffset + "px)");
    $setDuration(scaleEl, (params.rotateLock ? params.durationEnter : 0) + "ms");

    if (shadowEl) {
      $setDuration(shadowEl, (params.rotateLock ? params.durationEnter : 0) + "ms");
    }

    self.isActive = true;
    if (typeof params.onEnter === 'function') params.onEnter();
  };

  var onTouchMove = function onTouchMove(e) {
    if (rotated && e.cancelable) {
      e.preventDefault();
    }
  };

  var onPointerMove = function onPointerMove(e) {
    if (!params.rotate || !self.isActive) return;

    if (e.pointerType !== 'mouse') {
      if (!params.rotateTouch) return;
      e.preventDefault();
    }

    var clientX = e.clientX,
        clientY = e.clientY;

    if (!elBoundingClientRect) {
      elBoundingClientRect = el.getBoundingClientRect();
    }

    if (el !== eventsEl && !eventsElBoundingClientRect) {
      eventsElBoundingClientRect = eventsEl.getBoundingClientRect();
    }

    var rotateX = 0;
    var rotateY = 0;
    var _elBoundingClientRect = elBoundingClientRect,
        top = _elBoundingClientRect.top,
        left = _elBoundingClientRect.left,
        width = _elBoundingClientRect.width,
        height = _elBoundingClientRect.height;

    if (el === eventsEl) {
      var centerX = width / 2;
      var centerY = height / 2;
      var coordX = clientX - left;
      var coordY = clientY - top;
      rotateY = params.rotateYMax * (coordX - centerX) / (width / 2) * -1;
      rotateX = params.rotateXMax * (coordY - centerY) / (height / 2);
    } else {
      var _eventsElBoundingClie = eventsElBoundingClientRect,
          parentTop = _eventsElBoundingClie.top,
          parentLeft = _eventsElBoundingClie.left,
          parentWidth = _eventsElBoundingClie.width,
          parentHeight = _eventsElBoundingClie.height;
      var offsetLeft = left - parentLeft;
      var offsetTop = top - parentTop;

      var _centerX = width / 2 + offsetLeft;

      var _centerY = height / 2 + offsetTop;

      var _coordX = clientX - parentLeft;

      var _coordY = clientY - parentTop;

      rotateY = params.rotateYMax * (_coordX - _centerX) / (parentWidth - width / 2) * -1;
      rotateX = params.rotateXMax * (_coordY - _centerY) / (parentHeight - height / 2);
    }

    if (params.rotateLock) {
      if (typeof enterRotateY === 'undefined') {
        enterRotateY = rotateY;
        rotateYLock = true;
      }

      if (typeof enterRotateX === 'undefined') {
        enterRotateX = rotateX;
        rotateXLock = true;
      }

      if (rotateYLock) {
        if (enterRotateY < 0) {
          if (rotateY < 0) rotateY = 0;
          if (rotateY > 0) rotateYLock = false;
        }

        if (enterRotateY > 0) {
          if (rotateY > 0) rotateY = 0;
          if (rotateY < 0) rotateYLock = false;
        }
      }

      if (rotateXLock) {
        if (enterRotateX < 0) {
          if (rotateX < 0) rotateX = 0;
          if (rotateX > 0) rotateXLock = false;
        }

        if (enterRotateX > 0) {
          if (rotateX > 0) rotateX = 0;
          if (rotateX < 0) rotateXLock = false;
        }
      }
    }

    rotateX = Math.min(Math.max(-rotateX, -params.rotateXMax), params.rotateXMax);
    if (params.rotateXInvert) rotateX = -rotateX;
    rotateY = Math.min(Math.max(-rotateY, -params.rotateYMax), params.rotateYMax);
    if (params.rotateYInvert) rotateY = -rotateY;

    if (typeof params.rotateTouch === 'string' && (rotateX !== 0 || rotateY !== 0)) {
      if (!rotated) {
        rotated = true;
        el.classList.add('atropos-rotate-touch');
      }

      if (e.cancelable) {
        e.preventDefault();
      }
    }

    var rotateXPercentage = rotateX / params.rotateXMax * 100;
    var rotateYPercentage = rotateY / params.rotateYMax * 100;
    var stretchX = (el !== eventsEl ? rotateYPercentage / 100 * params.stretchX : 0) * (params.rotateYInvert ? -1 : 1);
    var stretchY = (el !== eventsEl ? rotateXPercentage / 100 * params.stretchY : 0) * (params.rotateXInvert ? -1 : 1);
    $setTransform(rotateEl, "translate3d(" + stretchX + "%, " + -stretchY + "%, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)");

    if (highlightEl) {
      $setDuration(highlightEl, '0ms');
      $setTransform(highlightEl, "translate3d(" + -rotateYPercentage * 0.25 + "%, " + rotateXPercentage * 0.25 + "%, 0)");
      highlightEl.style.opacity = Math.max(Math.abs(rotateXPercentage), Math.abs(rotateYPercentage)) / 100;
    }

    setChildrenOffset({
      rotateXPercentage: rotateXPercentage,
      rotateYPercentage: rotateYPercentage,
      duration: '0ms'
    });
    if (typeof params.onRotate === 'function') params.onRotate(rotateX, rotateY);
  };

  var onPointerLeave = function onPointerLeave(e) {
    elBoundingClientRect = undefined;
    eventsElBoundingClientRect = undefined;
    if (!self.isActive) return;
    if (e && e.type === 'pointerup' && e.pointerType === 'mouse') return;
    if (e && e.type === 'pointerleave' && e.pointerType !== 'mouse') return;

    if (typeof params.rotateTouch === 'string' && rotated) {
      el.classList.remove('atropos-rotate-touch');
    }

    el.classList.remove('atropos-active');
    $setTransform(scaleEl, "translate3d(0,0, " + 0 + "px)");
    $setDuration(scaleEl, params.durationLeave + "ms");

    if (shadowEl) {
      $setDuration(shadowEl, params.durationLeave + "ms");
    }

    if (highlightEl) {
      $setDuration(highlightEl, params.durationLeave + "ms");
      $setTransform(highlightEl, "translate3d(0, 0, 0)");
      highlightEl.style.opacity = 0;
    }

    $setDuration(rotateEl, params.durationLeave + "ms");
    $setTransform(rotateEl, "translate3d(0,0,0) rotateX(0deg) rotateY(0deg)");
    setChildrenOffset({
      duration: params.durationLeave + "ms"
    });
    self.isActive = false;
    if (typeof params.onRotate === 'function') params.onRotate(0, 0);
    if (typeof params.onLeave === 'function') params.onLeave();
  };

  var onDocumentClick = function onDocumentClick(e) {
    var clickTarget = e.target;

    if (!eventsEl.contains(clickTarget) && clickTarget !== eventsEl && self.isActive) {
      onPointerLeave();
    }
  };

  var initDOM = function initDOM() {
    if (typeof el === 'string') {
      el = $(document, el);
    }

    if (!el) return; // eslint-disable-next-line

    if (el.__atropos__) return;

    if (typeof eventsEl !== 'undefined') {
      if (typeof eventsEl === 'string') {
        eventsEl = $(document, eventsEl);
      }
    } else {
      eventsEl = el;
    }

    Object.assign(self, {
      el: el
    });
    rotateEl = $(el, '.atropos-rotate');
    scaleEl = $(el, '.atropos-scale');
    innerEl = $(el, '.atropos-inner'); // eslint-disable-next-line

    el.__atropos__ = self;
  };

  var init = function init() {
    initDOM();
    if (!el || !eventsEl) return;

    if (params.shadow) {
      createShadow();
    }

    if (params.highlight) {
      createHighlight();
    }

    if (params.rotateTouch) {
      if (typeof params.rotateTouch === 'string') {
        el.classList.add("atropos-rotate-touch-" + params.rotateTouch);
      } else {
        el.classList.add('atropos-rotate-touch');
      }
    }

    if ($(el, '[data-atropos-opacity]')) {
      setChildrenOffset({
        opacityOnly: true
      });
    }

    $on(document, 'click', onDocumentClick);
    $on(eventsEl, 'pointerdown', onPointerEnter);
    $on(eventsEl, 'pointerenter', onPointerEnter);
    $on(eventsEl, 'pointermove', onPointerMove);
    $on(eventsEl, 'touchmove', onTouchMove);
    $on(eventsEl, 'pointerleave', onPointerLeave);
    $on(eventsEl, 'pointerup', onPointerLeave);
    $on(eventsEl, 'lostpointercapture', onPointerLeave);
  };

  var destroy = function destroy() {
    self.destroyed = true;
    $off(document, 'click', onDocumentClick);
    $off(eventsEl, 'pointerdown', onPointerEnter);
    $off(eventsEl, 'pointerenter', onPointerEnter);
    $off(eventsEl, 'pointermove', onPointerMove);
    $off(eventsEl, 'touchmove', onTouchMove);
    $off(eventsEl, 'pointerleave', onPointerLeave);
    $off(eventsEl, 'pointerup', onPointerLeave);
    $off(eventsEl, 'lostpointercapture', onPointerLeave); // eslint-disable-next-line

    delete el.__atropos__;
  };

  self.destroy = destroy;
  init(); // eslint-disable-next-line

  return self;
}

export { Atropos, Atropos as default };
//# sourceMappingURL=atropos.esm.browser.js.map
